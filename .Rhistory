knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(warning = F)
library(plyr)
setwd("C:/DAL Assignment 1/")
setwd("./data_orig/")
data.src <- list.files(pattern = "*.csv")
data.df <- data.frame()
data.each.rows <- c()
data.each.cols <- c()
for (d in data.src) {
temp.df <- read.csv(d)
data.each.rows <- append(data.each.rows, nrow(temp.df))
data.each.cols <- append(data.each.cols, ncol(temp.df))
data.df <- rbind.fill(data.df, temp.df)
}
data.total.rows <- nrow(data.df)
data.total.cols <- ncol(data.df)
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),]
setwd("./data_orig/")
data2.df <- read.csv(data.src[2])
data2.df[!is.na(data2.df$X),]
setwd("./data_orig/")
data3.df <- read.csv(data.src[3])
data3.df[!is.na(data3.df$X),]
setwd("./data_orig/")
data5.df <- read.csv(data.src[5])
data5.df[!is.na(data5.df$X),]
data5.df[,104147]
data5.df[104147,]
data5.df[104147,"Size_Desc"]
data5.df[104147,"Shipped_Dt"]
data5.df[104147,"Size_Desc":"Shipped_Dt"]
data5.df[104147,c("Size_Desc","Shipped_Dt")]
data5.df[104147,c("Size_Desc":"Shipped_Dt")]
data5.df[104147,c(which(colnames(data5.df) == "Size_Desc"):which(colnames(data5.df) == "Shipped_Dt"))]
data5.df[104147,c(which(colnames(data5.df) == "Size_Desc"):which(colnames(data5.df) == "X"))]
data5.df[104147,c(which(colnames(data5.df) == "Size_Desc"):which(colnames(data5.df) == "SHIP_TO_ZIP"))]
rownames(data1.df[!is.na(data1.df$X),])
shift_columns(data1.df, rownames(data1.df[!is.na(data1.df$X)]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
shift_columns = function(df, aRows, dest.col.start, dest.col.end, target.col.start, target.col.end) {
df[aRows, c(which(colnames(df) == dest.col.start):which(colnames(df) == dest.col.end))] <-
df[aRows, c(which(colnames(df) == target.col.start):which(colnames(df) == target.col.end))]
}
shift_columns(data1.df, rownames(data1.df[!is.na(data1.df$X)]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
rownames(data1.df[!is.na(data1.df$X)])
rownames(data1.df[!is.na(data1.df$X)])
rownames(data1.df[!is.na(data1.df$X),])
shift_columns(data1.df, rownames(data1.df[!is.na(data1.df$X),]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
rownames(data1.df[!is.na(data1.df$X),])
data1.df[!is.na(data1.df$X),]
shift_columns(data1.df, rownames(data1.df[!is.na(data1.df$X),]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
data1.df <- shift_columns(data1.df,
rownames(data1.df[!is.na(data1.df$X),]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
View(data1.df)
rownames(data1.df[!is.na(data1.df$X),])
shift_columns = function(df, aRows, dest.col.start, dest.col.end, target.col.start, target.col.end) {
df[aRows, c(which(colnames(df) == dest.col.start):which(colnames(df) == dest.col.end))] <-
df[aRows, c(which(colnames(df) == target.col.start):which(colnames(df) == target.col.end))]
return(df)
}
data1.df <- shift_columns(data1.df,
rownames(data1.df[!is.na(data1.df$X),]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
View(data1.df)
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),]
shift_columns(data1.df,
rownames(data1.df[!is.na(data1.df$X),]),
"Size_Desc", "SHIP_TO_ZIP",
"Shipped_Dt", "X")
data1.df[!is.na(data1.df$X),]
aRows <- rownames(data1.df[!is.na(data1.df$X),])
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"))]
data1.df[aRows, c(which(colnames(data1.df) == "Shipeed_Dt"))]
?which
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"))]
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"))]
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))]
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))] <-
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"):which(colnames(data1.df) == "X"))]
data1.df[!is.na(data1.df$X),]
aRows <- rownames(data1.df[!is.na(data1.df$X),])
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))] <-
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"):which(colnames(data1.df) == "X"))]
aRows <- rownames(data1.df[!is.na(data2.df$X),])
data2.df[aRows, c(which(colnames(data2.df) == "Size_Desc"):which(colnames(data2.df) == "SHIP_TO_ZIP"))] <-
data2.df[aRows, c(which(colnames(data2.df) == "Shipped_Dt"):which(colnames(data2.df) == "X"))]
aRows <- rownames(data3.df[!is.na(data3.df$X),])
data3.df[aRows, c(which(colnames(data3.df) == "Size_Desc"):which(colnames(data3.df) == "SHIP_TO_ZIP"))] <-
data3.df[aRows, c(which(colnames(data3.df) == "Shipped_Dt"):which(colnames(data3.df) == "X"))]
aRows <- rownames(data5.df[!is.na(data5.df$X),])
data5.df[aRows, c(which(colnames(data5.df) == "Size_Desc"):which(colnames(data5.df) == "SHIP_TO_ZIP"))] <-
data5.df[aRows, c(which(colnames(data5.df) == "Shipped_Dt"):which(colnames(data5.df) == "X"))]
aRows <- rownames(data5.df[!is.na(data5.df$X),])
data5.df[aRows,]
aRows <- rownames(data1.df[!is.na(data1.df$X),])
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))] <-
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"):which(colnames(data1.df) == "X"))]
data1.df$X <- NULL
data1.df[aRows,]
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),]
aRows <- rownames(data1.df[!is.na(data1.df$X),])
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))] <-
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"):which(colnames(data1.df) == "X"))]
data1.df$X <- NULL
data1.df[aRows,]
aRows <- rownames(data1.df[!is.na(data2.df$X),])
data2.df[aRows, c(which(colnames(data2.df) == "Size_Desc"):which(colnames(data2.df) == "SHIP_TO_ZIP"))] <-
data2.df[aRows, c(which(colnames(data2.df) == "Shipped_Dt"):which(colnames(data2.df) == "X"))]
data2.df$X <- NULL
data2.df[aRows,]
setwd("./data_orig/")
data2.df <- read.csv(data.src[2])
data2.df[!is.na(data2.df$X),]
setwd("./data_orig/")
data3.df <- read.csv(data.src[3])
data3.df[!is.na(data3.df$X),]
setwd("./data_orig/")
data5.df <- read.csv(data.src[5])
data5.df[!is.na(data5.df$X),]
View(data1.df)
unique(data1.df$SHIP_TO_CITY)
data1.df[!is.na(data1.df$SHIP_TO_CITY)]
data1.df[!is.na(data1.df$SHIP_TO_CITY),]
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),]
setwd("./data_orig/")
data2.df <- read.csv(data.src[2])
data2.df[!is.na(data2.df$X),]
setwd("./data_orig/")
data3.df <- read.csv(data.src[3])
data3.df[!is.na(data3.df$X),]
setwd("./data_orig/")
data5.df <- read.csv(data.src[5])
data5.df[!is.na(data5.df$X),]
aRows <- rownames(data1.df[!is.na(data1.df$X),])
data1.df[aRows, c(which(colnames(data1.df) == "Size_Desc"):which(colnames(data1.df) == "SHIP_TO_ZIP"))] <-
data1.df[aRows, c(which(colnames(data1.df) == "Shipped_Dt"):which(colnames(data1.df) == "X"))]
data1.df$X <- NULL
data1.df[aRows,]
aRows <- rownames(data2.df[!is.na(data2.df$X),])
data2.df[aRows, c(which(colnames(data2.df) == "Size_Desc"):which(colnames(data2.df) == "SHIP_TO_ZIP"))] <-
data2.df[aRows, c(which(colnames(data2.df) == "Shipped_Dt"):which(colnames(data2.df) == "X"))]
data2.df$X <- NULL
data2.df[aRows,]
aRows <- rownames(data3.df[!is.na(data3.df$X),])
data3.df[aRows, c(which(colnames(data3.df) == "Size_Desc"):which(colnames(data3.df) == "SHIP_TO_ZIP"))] <-
data3.df[aRows, c(which(colnames(data3.df) == "Shipped_Dt"):which(colnames(data3.df) == "X"))]
data3.df$X <- NULL
data3.df[aRows,]
aRows <- rownames(data5.df[!is.na(data5.df$X),])
data5.df[aRows, c(which(colnames(data5.df) == "Size_Desc"):which(colnames(data5.df) == "SHIP_TO_ZIP"))] <-
data5.df[aRows, c(which(colnames(data5.df) == "Shipped_Dt"):which(colnames(data5.df) == "X"))]
data5.df$X <- NULL
data5.df[aRows,]
data.df <- data.frame()
data.df <- rbind.fill(data.df, data1.df)
data.df <- rbind.fill(data.df, data2.df)
data.df <- rbind.fill(data.df, data3.df)
temp.df <- read.csv(data.src[4])
setwd("./data_orig/")
data.df <- data.frame()
data.df <- rbind.fill(data.df, data1.df)
data.df <- rbind.fill(data.df, data2.df)
data.df <- rbind.fill(data.df, data3.df)
temp.df <- read.csv(data.src[4])
data.df <- rbind.fill(data.df, temp.df)
data.df <- rbind.fill(data.df, data5.df)
temp.df <- read.csv(data.src[6])
data.df <- rbind.fill(data.df, temp.df)
writeLines(paste("No. of Rows in New Combined Dataset:", nrow(data.df)))
writeLines(paste("No. of Columns in New Combined Dataset", ncol(data.df)))
write.csv(data.df, "QVC Data All.csv", row.names = F)
length(unique(data.df$X.Sales_Order_Nbr))
length(unique(data.df$Package_Id))
length(unique(data.df$X.Sales_Order_Nbr))
length(unique(data.df$SHIP_TO_ZIP))
length(data.df$Party_Id)
length(!data.df$Party_Id(!is.na(data.df$Party_Id)))
length(!data.df$Party_Id[!is.na(data.df$Party_Id)])
length(unique(data.df$Party_Id))
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(warning = F)
library(plyr)
library(dplyr)
select(data.df, X.Sales_Order_Line_Nbr, Sales_Order_Line_Nbr) %>%
library(dplyr)
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
summarise(Count = N())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
summarise(Count = n())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
order_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
summarise(Count = n())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
order_by(X.Sales_Order_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
summarise(Count = n())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
arrange(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
summarise(Count = n())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
arrange(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr) %>% #, Sales_Order_Line_Nbr
summarise(Count = n())
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr) %>% #, Sales_Order_Line_Nbr
summarise(Count = n()) %>%
arrange(desc(Count))
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>% #
summarise(Count = n()) %>%
arrange(desc(Count))
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr) %>% #
summarise(Count = length(unique(Sales_Order_Line_Nbr))) %>%
arrange(desc(Count))
select(data.df, X.Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(X.Sales_Order_Nbr) %>% #
summarise(Sales_Order_Nbr = as.factor(X.Sales_Order_Nbr),
Count = length(unique(Sales_Order_Line_Nbr))) %>%
arrange(desc(Count))
data.df$Sales_Order_Nbr <- as.factor(X.Sales_Order_Nbr)
data.df$Sales_Order_Nbr <- as.factor(data.df$X.Sales_Order_Nbr)
select(data.df, Sales_Order_Nbr, Sales_Order_Line_Nbr) %>%
group_by(Sales_Order_Nbr) %>% #
summarise(Count = length(unique(Sales_Order_Line_Nbr))) %>%
arrange(desc(Count))
data.df$Sales_Order_Line_Nbr[data.df$Sales_Order_Line_Nbr == 648884000000]
data.df$Sales_Order_Line_Nbr[data.df$Sales_Order_Line_Nbr == 64888400000]
data.df$Sales_Order_Line_Nbr[data.df$Sales_Order_Line_Nbr == 6488840000]
data.df$Sales_Order_Line_Nbr[data.df$X.Sales_Order_Line_Nbr == 648884000000]
library(ggplot2)
select(data.df, Sales_Order_Nbr) %>%
group_by(Sales_Order_Nbr) %>%
summarize(Count = n()) %>%
ggplot() %>%
geom_histogram(aes(x = Count), binwidth = 5)
select(data.df, Sales_Order_Nbr) %>%
group_by(Sales_Order_Nbr) %>%
summarize(Count = n())
select(data.df, Sales_Order_Nbr) %>%
group_by(Sales_Order_Nbr) %>%
summarize(Count = n()) %>%
as.data.frame() %>%
ggplot() %>%
geom_histogram(aes(x = Count), binwidth = 5)
select(data.df, Sales_Order_Nbr) %>%
group_by(Sales_Order_Nbr) %>%
summarize(Count = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Count), binwidth = 5)
select(data.df, Party_Id) %>%
group_by(Party_Id) %>%
summarize(Orders.Placed = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Count), binwidth = 5)
select(data.df, Party_Id) %>%
group_by(Party_Id) %>%
summarize(Orders.Placed = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Orders.Placed), binwidth = 5)
select(data.df, Party_Id) %>%
group_by(Party_Id) %>%
summarize(Orders.Placed = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Orders.Placed), binwidth = 5) +
xlab("Total Orders Placed")
select(data.df, Party_Id) %>%
group_by(Party_Id) %>%
summarize(Orders.Placed = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Orders.Placed), binwidth = 5) +
xlim(0, 100) +
xlab("Total Orders Placed")
select(data.df, Party_Id) %>%
group_by(Party_Id) %>%
summarize(Orders.Placed = n()) %>%
as.data.frame() %>%
ggplot() +
geom_histogram(aes(x = Orders.Placed), binwidth = 3) +
xlim(0, 100) +
xlab("Total Orders Placed")
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(warning = F)
data1.df[!is.na(data1.df$X),c("Size_Desc", "X")]
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),c("Size_Desc", "X")]
data1.df[!is.na(data1.df$X),"Size_Desc"]
data1.df[!is.na(data1.df$X),"Size_Desc":"X"]
data1.df[!is.na(data1.df$X),"Size_Desc":"SHIPPED_TO_ZIP"]
data1.df[!is.na(data1.df$X),"Size_Desc":"SHIP_TO_ZIP"]
data1.df[!is.na(data1.df$X),c("Size_Desc":"SHIP_TO_ZIP")]
data1.df[!is.na(data1.df$X),16:36]
setwd("./data_orig/")
data1.df <- read.csv(data.src[1])
data1.df[!is.na(data1.df$X),16:36]
data1.df[!is.na(data1.df$X),16:37]
?image
remove(list = ls())
install.packages("ROpenDota")
library(ROpenDota)
get_items()
install.packages("curl")
get_items()
update.packages()
update.packages()
# Install require packages for Project
required.packages <- read.delim("packages", header = F, sep = "\n")
# Install require packages for Project
required.packages <- read.delim("./packages", header = F, sep = "\n")
dirname(sys.frame(1)$ofile)
rstudioapi::getSourceEditorContext()$path
RStudioGD()
??restudio
install.packages("here")
library(here)
here("construct","a","path")
?here
dr_here()
setwd("C:/ASAR Project")
set_here()
here()
# Set your project folder here
setwd("C:/ASAR Project")
required.packages <- read.delim("packages", header = F, sep = "\n")
View(required.packages)
required.packages <- read.delim("packages", header = F, sep = "\n\r")
# Install require packages for Project
for (package in required.packages) {
if(!require(package)) {
install.packages(package)
}
}
# Install require packages for Project
for (package in required.packages) {
if(!require(package)) {
install.packages(package)
}
}
required.packages <- unlist(read.delim("packages", header = F, sep = "\n\r"))
required.packages <- read.delim("packages", header = F, sep = "\n\r")$V1
required.packages <- read.delim("packages", header = F, sep = "\n")$V1
# Install require packages for Project
for (package in required.packages) {
if(!require(package)) {
install.packages(package)
}
}
warnings()
required.packages <- read.delim("packages", header = F, sep = "\n")$V1
# Install require packages for Project
for (package in required.packages) {
if(!require(package)) {
install.packages(package)
}
}
required.packages <- unlist(read.delim("packages", header = F, sep = "\n")$V1)
required.packages <- list(read.delim("packages", header = F, sep = "\n")$V1)
required.packages <- list(read.delim("packages", header = F, sep = "\n"))
required.packages <- read.delim("packages", header = F, sep = "\n")
typeof(required.packages)
package
# Install require packages for Project
for (package in required.packages) {
package
#  if(!require(package)) {
#    install.packages(package)
#  }
}
print(package)
# Install require packages for Project
for (i in 1:length(required.packages)) {
package <- required.packages[i]
#  if(!require(package)) {
#    install.packages(package)
#  }
}
package <- required.packages[[i]]
required.packages <- as.character(required.packages)
required.packages <- read.delim("packages", header = F, sep = "\n")
required.packages <- as.character(required.packages$V1)
# Install require packages for Project
for (i in 1:length(required.packages)) {
package <- required.packages[[i]]
#  if(!require(package)) {
#    install.packages(package)
#  }
}
# Install require packages for Project
for (package in required.packages) {
package
#  if(!require(package)) {
#    install.packages(package)
#  }
}
# Install require packages for Project
for (package in required.packages) {
print(package)
#  if(!require(package)) {
#    install.packages(package)
#  }
}
# Install require packages for Project
for (package in required.packages) {
print(package)
if(!require(package)) {
install.packages(package)
}
}
?require
# Install require packages for Project
for (package in required.packages) {
print(package)
if(!require(package, character.only = T)) {
install.packages(package)
}
}
# Install require packages for Project
lapply(required.packages, function () {
print(package)
if(!require(package, character.only = T)) {
install.packages(package, dependencies = T)
}
})
# Install require packages for Project
lapply(required.packages, FUN = function () {
print(package)
if(!require(package, character.only = T)) {
install.packages(package, dependencies = T)
}
})
# Install require packages for Project
lapply(required.packages, FUN = function (package) {
print(package)
if(!require(package, character.only = T)) {
install.packages(package, dependencies = T)
}
})
# Install require packages for Project
lapply(required.packages, FUN = function (package) {
print(package)
if(!require(package, character.only = T)) {
install.packages(package, dependencies = T)
}
})
# Set your project folder here
setwd("C:/ASAR Project")
required.packages <- read.delim("packages", header = F, sep = "\n")
required.packages <- as.character(required.packages$V1)
# Install require packages for Project
lapply(required.packages, FUN = function (package) {
print(package)
if(!require(package, character.only = T)) {
install.packages(package, dependencies = T)
}
})
update.packages()
?require
installed.packages()
installed.packages()[,"tidyr"]
[,"tidyr"]
test <- installed.packages()
View(test)
test <- installed.packages()["tidyr,"]
test <- installed.packages()
View(test)
test <- installed.packages()$Package
View(test)
test <- installed.packages()["Package"]
test <- test["Package"]
test <- installed.packages()
typeof(test)
View(test)
test <- as.dataframe(installed.packages())
test <- as.data.frame(installed.packages())
test <- as.data.frame(installed.packages())$Package
test <- as.character(as.data.frame(installed.packages())$Package)
print("tidyr" %in% test)
installed <- as.character(as.data.frame(installed.packages())$Package)
# Set your project folder here
setwd("C:/ASAR Project")
source('C:/ASAR Project/project_installation.R')
source('C:/ASAR Project/project_installation.R')
